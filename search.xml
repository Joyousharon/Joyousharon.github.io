<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>她的梦里</title>
      <link href="/undefined/%E5%A5%B9%E7%9A%84%E6%A2%A6%E9%87%8C/"/>
      <url>/undefined/%E5%A5%B9%E7%9A%84%E6%A2%A6%E9%87%8C/</url>
      
        <content type="html"><![CDATA[<div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><p>梦<br>我知道我在做梦，<br>开头的故事我忘记了，<br>我记得我在云中飞行，从第一视角穿过一道道厚厚的白色云层，不知飞了多久，我依稀记得天边火红的夕阳和晚霞，好像没用夕阳，又好像有，只记得白色的云层尽头一片火烧云景象<br>似乎我的梦要醒了，梦境好像出现了断层<br>然后我又在地面了，<br>似乎不是森林，但梦中的树木和路边的叶子却是童话里的样子<br>我想起来描述场景的词汇是爱丽丝梦游仙境，可是我也没看过这个故事啊<br>再后来，梦里的故事怎样了，我记不得了<br>真的记不得了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>她的梦里</title>
      <link href="/undefined/halo%E6%90%AD%E5%BB%BA%E8%84%9A%E6%9C%AC/"/>
      <url>/undefined/halo%E6%90%AD%E5%BB%BA%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>添加SWAP虚拟内存<br>注意：VPS 的内存如果过小，建议设置一下 SWAP，一般为内存的 1-1.5 倍即可，可以让系统运行更流畅！</p><p>设置 SWAP 可以用脚本:</p><p>wget -O box.sh <a href="https://raw.githubusercontent.com/BlueSkyXN/SKY-BOX/main/box.sh">https://raw.githubusercontent.com/BlueSkyXN/SKY-BOX/main/box.sh</a> &amp;&amp; chmod +x box.sh &amp;&amp; clear &amp;&amp; .&#x2F;box.sh</p><p>选择 18，然后输入你想要扩容的数值即可。</p><p>升级 packages<br>sudo -i # 切换到 root 用户</p><p>apt update -y  # 升级 packages</p><p>apt install wget curl sudo vim git -y  # Debian 系统比较干净，安装常用的软件<br>安装 Docker 环境<br>安装 Docker（非大陆服务器）<br>wget -qO- get.docker.com | bash<br>docker -v  #查看 docker 版本<br>systemctl enable docker  # 设置开机自动启动<br>安装 Docker-compose（非大陆服务器）<br>sudo curl -L “<a href="https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$">https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$</a>(uname -s)-$(uname -m)” -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<br>sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<br>docker-compose –version  #查看 docker-compose 版本<br>安装 Docker（国内服务器）<br>curl -sSL <a href="https://get.daocloud.io/docker">https://get.daocloud.io/docker</a> | sh<br>docker -v  #查看 docker 版本<br>systemctl enable docker  # 设置开机自动启动<br>安装 Docker-compose（国内服务器）<br>curl -L <a href="https://get.daocloud.io/docker/compose/releases/download/v2.1.1/docker-compose-%60uname">https://get.daocloud.io/docker/compose/releases/download/v2.1.1/docker-compose-`uname</a> -s<code>-</code>uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</p><p>chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</p><p>docker-compose –version  #查看 docker-compose 版本</p><p>安装 Nginx Proxy Manager<br>创建安装目录<br>创建一下安装的目录：</p><p>sudo -i</p><p>mkdir -p &#x2F;root&#x2F;data&#x2F;docker_data&#x2F;npm</p><p>cd &#x2F;root&#x2F;data&#x2F;docker_data&#x2F;npm<br>这边我们直接用 docker 的方式安装。</p><p>vim docker-compose.yml<br>英文输入法下，按 i</p><p>version: ‘3’<br>services:<br>  app:<br>    image: ‘jc21&#x2F;nginx-proxy-manager:latest’<br>    restart: unless-stopped<br>    ports:<br>      - ‘80:80’  # 保持默认即可，不建议修改左侧的80<br>      - ‘81:81’  # 冒号左边可以改成自己服务器未被占用的端口<br>      - ‘443:443’ # 保持默认即可，不建议修改左侧的443<br>    volumes:<br>      - .&#x2F;data:&#x2F;data # 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 data 文件夹中<br>      - .&#x2F;letsencrypt:&#x2F;etc&#x2F;letsencrypt  # 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 letsencrypt 文件夹中<br>按一下 esc，然后 :wq 保存退出，之后，</p><p>打开服务器防火墙并访问网页（非必需）<br>打开防火墙的端口 81</p><p>查看端口是否被占用（以 81 为例），输入：</p><p>lsof -i:81  #查看 81 端口是否被占用，如果被占用，重新自定义一个端口<br>如果啥也没出现，表示端口未被占用，我们可以继续下面的操作了～</p><p>如果出现：</p><p>-bash: lsof: command not found<br>运行：</p><p>apt install lsof  #安装 lsof<br>如果端口没有被占用（被占用了就修改一下端口，比如改成 82，注意 docker 命令行里和防火墙都要改）</p><p>运行并访问 Nginx Proxy Manager<br>最后：</p><p>cd &#x2F;root&#x2F;data&#x2F;docker_data&#x2F;npm   # 来到 dockercompose 文件所在的文件夹下</p><p>docker-compose up -d<br>理论上我们就可以输入 <a href="http://ip:81/">http://ip:81</a> 访问了。</p><p>默认登陆名和密码：</p><p>Email:    <a href="mailto:&#x61;&#100;&#109;&#x69;&#x6e;&#64;&#101;&#x78;&#97;&#109;&#x70;&#108;&#101;&#46;&#x63;&#x6f;&#109;">&#x61;&#100;&#109;&#x69;&#x6e;&#64;&#101;&#x78;&#97;&#109;&#x70;&#108;&#101;&#46;&#x63;&#x6f;&#109;</a><br>Password: changeme<br>注意：</p><p>1、不知道服务器 IP，可以直接在命令行输入：curl ip.sb，会显示当前服务器的 IP。</p><p>2、遇到访问不了的情况，请再次检查在宝塔面板的防火墙和服务商的后台防火墙是否打开对应了端口。</p><p>更新 Nginx Proxy Manager<br>cd &#x2F;root&#x2F;data&#x2F;docker_data&#x2F;npm</p><p>docker-compose down </p><p>cp -r &#x2F;root&#x2F;data&#x2F;docker_data&#x2F;npm &#x2F;root&#x2F;data&#x2F;docker_data&#x2F;npm.archive  # 万事先备份，以防万一</p><p>docker-compose pull</p><p>docker-compose up -d    # 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</p><p>docker image prune  # prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像<br>提示：</p><p>WARNING! This will remove all dangling images.<br>Are you sure you want to continue? [y&#x2F;N]<br>输入 y</p><p>利用 Docker 搭建的应用，更新非常容易～</p><p>卸载 Nginx Proxy Manager<br>cd &#x2F;root&#x2F;data&#x2F;docker_data&#x2F;npm</p><p>docker-compose down </p><p>rm -rf &#x2F;root&#x2F;data&#x2F;docker_data&#x2F;npm  # 完全删除映射到本地的数据<br>可以卸载得很干净。</p><p>5.1 安装 Docker 与 Nginx Proxy Manager<br>可以直接参考这篇内容：</p><p><a href="https://blog.laoda.de/archives/nginxproxymanager">https://blog.laoda.de/archives/nginxproxymanager</a></p><p>5.2 创建安装目录<br>创建一下安装的目录：</p><p>sudo -i</p><p>mkdir -p &#x2F;root&#x2F;data&#x2F;docker_data&#x2F;halo</p><p>cd &#x2F;root&#x2F;data&#x2F;docker_data&#x2F;halo<br>Copy<br>这边我们直接用 docker 的方式安装。</p><p>vim docker-compose.yml<br>Copy<br>英文输入法下，按 i</p><p>version: “3”</p><p>services:<br>  halo:<br>    image: halohub&#x2F;halo:2.6.0<br>    container_name: halo<br>    restart: on-failure:3<br>    depends_on:<br>      halodb:<br>        condition: service_healthy<br>    networks:<br>      halo_network:<br>    volumes:<br>      - .&#x2F;:&#x2F;root&#x2F;.halo2<br>    ports:<br>      - “8090:8090”<br>    command:<br>      - –spring.r2dbc.url&#x3D;r2dbc:pool:mysql:&#x2F;&#x2F;halodb:3306&#x2F;halo<br>      - –spring.r2dbc.username&#x3D;root<br>      # MySQL 的密码，请保证与下方 MYSQL_ROOT_PASSWORD 的变量值一致。<br>      - –spring.r2dbc.password&#x3D;o#DwN&amp;JSa56<br>      - –spring.sql.init.platform&#x3D;mysql<br>      # 外部访问地址，请根据实际需要修改<br>      - –halo.external-url&#x3D;<a href="http://localhost:8090/">http://localhost:8090/</a><br>      # 初始化的超级管理员用户名<br>      - –halo.security.initializer.superadminusername&#x3D;admin<br>      # 初始化的超级管理员密码<br>      - --halo.security.initializer.superadminpassword&#x3D;P@88w0rd</p><p>  halodb:<br>    image: mysql:8.0.31<br>    container_name: halodb<br>    restart: on-failure:3<br>    networks:<br>      halo_network:<br>    command:<br>      - –default-authentication-plugin&#x3D;mysql_native_password<br>      - –character-set-server&#x3D;utf8mb4<br>      - –collation-server&#x3D;utf8mb4_general_ci<br>      - –explicit_defaults_for_timestamp&#x3D;true<br>    volumes:<br>      - .&#x2F;mysql:&#x2F;var&#x2F;lib&#x2F;mysql<br>      - .&#x2F;mysqlBackup:&#x2F;data&#x2F;mysqlBackup<br>    ports:<br>      - “3306”<br>    healthcheck:<br>      test: [“CMD”, “mysqladmin”, “ping”, “-h”, “127.0.0.1”, “–silent”]<br>      interval: 3s<br>      retries: 5<br>      start_period: 30s<br>    environment:<br>      # 请修改此密码，并对应修改上方 Halo 服务的 SPRING_R2DBC_PASSWORD 变量值<br>      - MYSQL_ROOT_PASSWORD&#x3D;o#DwN&amp;JSa56<br>      - MYSQL_DATABASE&#x3D;halo</p><p>networks:<br>  halo_network:<br>Copy<br>注意：docker-compose.yml 里面的–halo.external-url&#x3D;<a href="http://localhost:8090/">http://localhost:8090/</a> ，其中的<a href="http://localhost:8090/%E9%9C%80%E8%A6%81%E6%9B%B4%E6%94%B9%E4%B8%BA%E4%BD%A0%E7%9A%84%E5%9F%9F%E5%90%8D%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%89%93%E7%AE%97%E7%94%A8%E7%9A%84%E5%9F%9F%E5%90%8D%E6%98%AFabc.com%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%A6%81%E6%94%B9%E6%88%90--halo.external-url=https://abc.com">http://localhost:8090/需要更改为你的域名，如果你打算用的域名是abc.com也就是要改成--halo.external-url=https://abc.com</a></p><p>版本号2.6.0，可以看这边：<a href="https://github.com/halo-dev/halo/releases">https://github.com/halo-dev/halo/releases</a>   保证自己是新版本～</p><p>接着，千万记得改密码！！！</p><p>不然，你也会像这样：</p><p>75799c30a3a90bd3e5dc2d6f3c6286d4.png</p><p>PS：细心的小伙伴会发现，docker-compose.yml里面数据库3306并没有写成3306:3306，官网是写的后者，咕咕改成了前者，为的就是不在公网暴露halo数据库的端口，这样也能一定程度保障博客的安全。</p><p>修改好之后，注意切换成英文输入法，然后按一下 esc，然后 :wq 保存退出。</p><p>5.3 打开服务器防火墙（非必需）并访问网页<br>打开防火墙的端口 8090</p><p>查看端口是否被占用（以 8090 为例），输入：</p><p>lsof -i:8090  #查看 8090 端口是否被占用，如果被占用，重新自定义一个端口<br>Copy<br>如果啥也没出现，表示端口未被占用，我们可以继续下面的操作了～</p><p>如果出现：</p><p>-bash: lsof: command not found<br>Copy<br>运行：</p><p>apt install lsof  #安装 lsof<br>Copy<br>如果端口没有被占用（被占用了就修改一下端口，比如改成 8081，注意 docker 命令行里和防火墙都要改）</p><p>最后：</p><p>cd &#x2F;root&#x2F;data&#x2F;docker_data&#x2F;halo    # 来到 dockercompose 文件所在的文件夹下</p><p>docker-compose up -d<br>Copy<br>理论上我们就可以输入 <a href="http://ip:8090/">http://ip:8090</a> 访问安装了。</p><p>5.4 更新 halo<br>cd &#x2F;root&#x2F;data&#x2F;docker_data&#x2F;halo</p><p>docker-compose down </p><p>cp -r &#x2F;root&#x2F;data&#x2F;docker_data&#x2F;halo &#x2F;root&#x2F;data&#x2F;docker_data&#x2F;halo.archive  # 万事先备份，以防万一</p><p>docker-compose pull</p><p>docker-compose up -d    # 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</p><p>docker image prune  # prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像<br>Copy<br>提示：</p><p>WARNING! This will remove all dangling images.<br>Are you sure you want to continue? [y&#x2F;N]<br>Copy<br>输入 y</p><p>利用 Docker 搭建的应用，更新非常容易～</p><p>5.5 卸载 halo<br>cd &#x2F;root&#x2F;data&#x2F;docker_data&#x2F;halo</p><p>docker-compose down</p><p>cd ..</p><p>rm -rf &#x2F;root&#x2F;data&#x2F;docker_data&#x2F;halo  # 完全删除映射到本地的数据<br>Copy<br>可以卸载得很干净。</p><ol start="6"><li>反向代理<br>我们要用域名而不是IP+端口的方式来访问我们的服务！</li></ol><p>6.1 利用 Nginx Proxy Manager</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>唯有清风笑</title>
      <link href="/undefined/%E5%94%AF%E6%9C%89%E6%B8%85%E9%A3%8E%E7%AC%91/"/>
      <url>/undefined/%E5%94%AF%E6%9C%89%E6%B8%85%E9%A3%8E%E7%AC%91/</url>
      
        <content type="html"><![CDATA[<div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style><p>我是谁？</p><p>About Me<br>Hi, 我应该是谁呢？<br>是一个三十三岁的平淡无奇而且还毫无作为的中年大叔吗？</p><p>还是一个迷失了自我，看不清前方方向的迷途者？</p><p>为了明天却还要放弃明天<br>为什么会这样，人不都是自由的吗？为什么被束缚的不只是肉体，还又灵魂呢？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的Sxm博客</title>
      <link href="/undefined/%E6%88%91%E7%9A%84sxm%E5%8D%9A%E5%AE%A2/"/>
      <url>/undefined/%E6%88%91%E7%9A%84sxm%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>她和她的狗<br>她的狗却一直不会走</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/undefined/hello-world/"/>
      <url>/undefined/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
